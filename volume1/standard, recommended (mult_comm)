Theorem plus_comm : forall n m : nat,
  n + m = m + n.
Proof.
  intros n m. induction n as [| n' IHn'].
  - simpl. rewrite <- plus_n_O. reflexivity. 
  - simpl. rewrite -> IHn'. rewrite -> plus_n_Sm. reflexivity. Qed. 


Theorem plus_assoc : forall n m p : nat,
  n + (m + p) = (n + m) + p.
Proof.
  intros n m p. induction n as [| n' IHn'].
  - simpl. reflexivity.
  - simpl. rewrite -> IHn'. reflexivity. Qed.

Theorem plus_swap : forall n m p : nat,
  n + (m + p) = m + (n + p).
Proof.
  intros n m p. rewrite -> plus_comm. rewrite <- plus_assoc.
  assert (H : p + n = n + p). { rewrite -> plus_comm. reflexivity. }
  rewrite -> H. reflexivity. Qed.


Theorem mult_0 : forall n, n * 0 = 0.
Proof.
  induction n as [|q].
    reflexivity.
    simpl. rewrite -> IHq. reflexivity.
Qed.

Theorem mult_1 : forall n, n * 1 = n.
Proof.
  induction n as [|q].
    reflexivity.
    simpl. rewrite -> IHq. reflexivity.
Qed.

Theorem plus_0_r : forall n : nat, n + 0 = n.
Proof.
  intros n.
  induction n as [|n'].
  - simpl. reflexivity.
  - simpl. rewrite -> IHn'. reflexivity. Qed.

Theorem mult_comm_lemma : forall n m, m * S n = m + m * n.
Proof.
  intros n m.
  induction m as [|p].
    simpl. reflexivity.
    simpl. rewrite -> plus_swap. rewrite -> IHp. reflexivity.
Qed.

Theorem mult_comm : forall m n : nat,
  m * n = n * m.
Proof.
  intros n m. induction n as [| n' IHn'].
  - simpl. assert (H: m*0 = 0). { induction m as [| m' IHm']. simpl. reflexivity. simpl. rewrite -> IHm'. reflexivity. }
    rewrite -> H. reflexivity.
  - simpl. rewrite -> IHn'. rewrite -> mult_comm_lemma. reflexivity. Qed. 